"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Time_t

class MINCOTraj_t(object):
    __slots__ = ["start_time", "drone_id", "traj_id", "des_clearance", "order", "piece_num", "start_p", "start_v", "start_a", "end_p", "end_v", "end_a", "inner_x", "inner_y", "inner_z", "duration"]

    __typenames__ = ["Time_t", "int16_t", "int32_t", "float", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, [3], [3], [3], [3], [3], [3], ["piece_num"], ["piece_num"], ["piece_num"], ["piece_num"]]

    def __init__(self):
        self.start_time = Time_t()
        self.drone_id = 0
        self.traj_id = 0
        self.des_clearance = 0.0
        self.order = 0
        self.piece_num = 0
        self.start_p = [ 0.0 for dim0 in range(3) ]
        self.start_v = [ 0.0 for dim0 in range(3) ]
        self.start_a = [ 0.0 for dim0 in range(3) ]
        self.end_p = [ 0.0 for dim0 in range(3) ]
        self.end_v = [ 0.0 for dim0 in range(3) ]
        self.end_a = [ 0.0 for dim0 in range(3) ]
        self.inner_x = []
        self.inner_y = []
        self.inner_z = []
        self.duration = []

    def encode(self):
        buf = BytesIO()
        buf.write(MINCOTraj_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.start_time._get_packed_fingerprint() == Time_t._get_packed_fingerprint()
        self.start_time._encode_one(buf)
        buf.write(struct.pack(">hifbb", self.drone_id, self.traj_id, self.des_clearance, self.order, self.piece_num))
        buf.write(struct.pack('>3f', *self.start_p[:3]))
        buf.write(struct.pack('>3f', *self.start_v[:3]))
        buf.write(struct.pack('>3f', *self.start_a[:3]))
        buf.write(struct.pack('>3f', *self.end_p[:3]))
        buf.write(struct.pack('>3f', *self.end_v[:3]))
        buf.write(struct.pack('>3f', *self.end_a[:3]))
        buf.write(struct.pack('>%df' % self.piece_num, *self.inner_x[:self.piece_num]))
        buf.write(struct.pack('>%df' % self.piece_num, *self.inner_y[:self.piece_num]))
        buf.write(struct.pack('>%df' % self.piece_num, *self.inner_z[:self.piece_num]))
        buf.write(struct.pack('>%df' % self.piece_num, *self.duration[:self.piece_num]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MINCOTraj_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MINCOTraj_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = MINCOTraj_t()
        self.start_time = Time_t._decode_one(buf)
        self.drone_id, self.traj_id, self.des_clearance, self.order, self.piece_num = struct.unpack(">hifbb", buf.read(12))
        self.start_p = struct.unpack('>3f', buf.read(12))
        self.start_v = struct.unpack('>3f', buf.read(12))
        self.start_a = struct.unpack('>3f', buf.read(12))
        self.end_p = struct.unpack('>3f', buf.read(12))
        self.end_v = struct.unpack('>3f', buf.read(12))
        self.end_a = struct.unpack('>3f', buf.read(12))
        self.inner_x = struct.unpack('>%df' % self.piece_num, buf.read(self.piece_num * 4))
        self.inner_y = struct.unpack('>%df' % self.piece_num, buf.read(self.piece_num * 4))
        self.inner_z = struct.unpack('>%df' % self.piece_num, buf.read(self.piece_num * 4))
        self.duration = struct.unpack('>%df' % self.piece_num, buf.read(self.piece_num * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if MINCOTraj_t in parents: return 0
        newparents = parents + [MINCOTraj_t]
        tmphash = (0x491100d400ed02ab+ Time_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if MINCOTraj_t._packed_fingerprint is None:
            MINCOTraj_t._packed_fingerprint = struct.pack(">Q", MINCOTraj_t._get_hash_recursive([]))
        return MINCOTraj_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

